{"version":3,"file":"link-in-body-async.js","sources":["../src/lib/on-style-load.js","../src/lib/globals.js","../src/link-in-body-async.js"],"sourcesContent":["import { styleSheets } from './globals';\n\n/**\n * A method that mimics onload by polling document.styleSheets\n * until it includes the new sheet.\n *\n * @param  {String}   resolvedHref Resolved href of CSS-file.\n * @param  {Function} cb           Load callback.\n * @return {void}\n */\nexport default function onStyleLoad(resolvedHref, cb) {\n\n\tlet i = styleSheets.length;\n\n\twhile (i--) {\n\t\tif (styleSheets[i].href === resolvedHref) {\n\t\t\tcb();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tsetTimeout(() => {\n\t\tonStyleLoad(resolvedHref, cb);\n\t});\n}\n","\nexport const document = window.document,\n\tstyleSheets = document.styleSheets,\n\troot = document.body || document.getElementsByTagName('head')[0];\n","/**\n * Load CSS asynchronously without render blocking.\n * This variant uses <link> tag.\n *\n * If you want to import multiple styles for \"progressive loading\"\n * recommended to move all function calls before </body>.\n *\n * This variant a little lighter than `link-async.js`.\n * FOR USAGE IN <body> ONLY!\n */\n\nimport { document, root } from './lib/globals';\nimport onStyleLoad from './lib/on-style-load';\n\nlet queue = [];\n\nwindow.importCSS = (href, media, async) => {\n\n\tconst link = document.createElement('link');\n\n\tlet loaded = false;\n\n\tlink.rel = 'stylesheet';\n\tlink.href = href;\n\tlink.media = 'only x'; // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\n\tfunction apply() {\n\n\t\tif (loaded) {\n\t\t\tlink.media = media || 'all';\n\t\t}\n\n\t\treturn loaded;\n\t}\n\n\tif (!async) {\n\t\tqueue.push(apply);\n\t}\n\n\t// `insertBefore` is used instead of `appendChild`,\n\t// for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\troot.insertBefore(link, null);\n\n\tfunction onLoad() {\n\n\t\tif (link.addEventListener) {\n\t\t\tlink.removeEventListener('load', onLoad);\n\t\t}\n\n\t\tloaded = true;\n\n\t\tlet prev = true;\n\n\t\tif (async) {\n\t\t\tapply();\n\t\t} else {\n\t\t\tqueue = queue.filter(_ =>\n\t\t\t\t!(prev = prev && _())\n\t\t\t);\n\t\t}\n\t}\n\n\t// once loaded, set link's media back to `all`\n\t// so that the stylesheet applies once it loads\n\tif (link.addEventListener) {\n\t\tlink.addEventListener('load', onLoad);\n\t}\n\n\tonStyleLoad(link.href, onLoad);\n};\n"],"names":["i","styleSheets","length","href","document","window","root","body","getElementsByTagName","queue","importCSS","media","link","addEventListener","removeEventListener","prev","filter","_","createElement","loaded","rel","push","insertBefore"],"mappings":"yBAUe,eAAuC,QAEjDA,GAAIC,EAAYC,MAFiC,CAI9CF,GAJ8C,KAKhDC,KAAeE,IAAfF,gCAMM,UAAM,OAAjB,GCpBM,GAAMG,GAAWC,OAAOD,QAAxB,CACNH,EAAcG,EAASH,WADjB,CAENK,EAAOF,EAASG,IAATH,EAAiBA,EAASI,oBAATJ,CAA8B,MAA9BA,EAAsC,CAAtCA,CAFlB,CCaHK,IDbG,CCePJ,OAAOK,SAAPL,CAAmB,eAAwB,aAUzB,cAGVM,MAAQA,GAAS,qBAcN,CAEbC,EAAKC,gBAFQ,IAGXC,oBAAoB,SAHT,KAAA,IAQbC,MARa,KAAA,GAaRN,EAAMO,MAANP,CAAa,kBACpB,EAAEM,EAAOA,GAAQE,GAAjB,CADO,CAAAR,KAtCJG,GAAOR,EAASc,aAATd,CAAuB,MAAvBA,EAETe,OAECC,IAAM,YAN+B,GAOrCjB,MAPqC,GAQrCQ,MAAQ,QAR6B,MAoBnCU,OApBmC,GAyBrCC,eAAmB,KAzBkB,CAgDtCV,EAAKC,gBAhDiC,IAiDpCA,iBAAiB,SAjDmB,GAoD9BD,EAAKT,OApDlB"}